// global storage object for type-ahead info, including reset() method
var typeAheadInfo = {last:0, 
                     accumString:"", 
                     delay:2000,
                     timeout:null, 
                     reset:function() {this.last=0; this.accumString=""}
                    };

// function invoked by select element's onkeydown event handler
function typeAhead() {
   // limit processing to IE event model supporter; don't trap Ctrl+keys
   if (window.event && !window.event.ctrlKey) {
      // timer for current event
      var now = new Date();
      // process for an empty accumString or an event within [delay] ms of last
      if (typeAheadInfo.accumString == "" || now - typeAheadInfo.last < typeAheadInfo.delay) {
         // make shortcut event object reference
         var evt = window.event;
         // get reference to the select element
         var selectElem = evt.srcElement;
         // get typed character ASCII value
         var charCode = evt.keyCode;
		 // detect tab keys
		 if (charCode==9) {
			// clear the accumulated string
			typeAheadInfo.accumString = '';
			// exit
			return;
		 }
         // get the actual character, converted to uppercase
         var newChar =  String.fromCharCode(charCode).toUpperCase();
         // append new character to accumString storage
         typeAheadInfo.accumString += newChar;
         // grab all select element option objects as an array
         var selectOptions = selectElem.options;
         // prepare local variables for use inside loop
         var txt, nearest;
         // look through all options for a match starting with accumString
         for (var i = 0; i < selectOptions.length; i++) {
            // convert each item's text to uppercase to facilitate comparison
            // (use value property if you want match to be for hidden option value)
            txt = selectOptions[i].text.toUpperCase();
            // record nearest lowest index, if applicable
            nearest = (typeAheadInfo.accumString > 
                       txt.substr(0, typeAheadInfo.accumString.length)) ? i : nearest;
            // process if accumString is at start of option text
            if (txt.indexOf(typeAheadInfo.accumString) == 0) {
               // stop any previous timeout timer
               clearTimeout(typeAheadInfo.timeout);
               // store current event's time in object 
               typeAheadInfo.last = now;
               // reset typeAhead properties in [delay] ms unless cleared beforehand
               typeAheadInfo.timeout = setTimeout("typeAheadInfo.reset()", typeAheadInfo.delay);
               // visibly select the matching item
               selectElem.selectedIndex = i;
               // prevent default event actions and propagation
               evt.cancelBubble = true;
               evt.returnValue = false;
               // exit function
               return false;   
            }            
         }
         // if a next lowest match exists, select it
         if (nearest != null) {
            selectElem.selectedIndex = nearest;
         }
      } else {
         // not a desired event, so clear timeout
         clearTimeout(typeAheadInfo.timeout);
      }
      // reset global object
      typeAheadInfo.reset();
   }
   return true;
}
;var Utils_CommonData = Class.create();
Utils_CommonData.prototype = {
	obj:null,
	path:null,
	add_empty:null,
	def_val:'',
	initialize: function(id,val,cd,ae) {
		this.obj = $(id);
		if(this.obj==null) return;
		this.path = cd.evalJSON();
		this.add_empty = ae;
		this.def_val = val;
		var obj = this.obj;
		var prev_obj = eval('obj.form.'+this.path[this.path.length-1]);
		Event.observe(prev_obj,'change',this.request.bindAsEventListener(this));
		Event.observe(prev_obj,'e_u_cd:load',this.request.bindAsEventListener(this));
		Event.observe(prev_obj,'e_u_cd:clear',function(){obj.options.length=0;obj.fire('e_u_cd:clear');});

		this.first_request_bind = this.first_request.bindAsEventListener(this);
		if(this.path.length==2)
			Event.observe(document,'e:load',this.first_request_bind);
	},

	first_request: function(e) {
		Event.stopObserving(document,'e:load',this.first_request_bind);
//		alert('first');
		this.request(null);
	},
	first_request_bind:null,

	request: function(e) {
		var obj = this.obj;
//		alert('request '+obj.name);
		obj.options.length=0;
		var curr_root = this.path[0];
		for(var i=1; i<this.path.length; i++) {
			var val = eval('obj.form.'+this.path[i]).value;
			if(val=='') {
				this.obj.options.length=0;
				this.obj.fire('e_u_cd:clear');
//				setTimeout(this.obj.fire.bind(this.obj,'e_u_cd:clear'),1);
				return;
			}
			curr_root += '/' + val;
		}
		new Ajax.Request('modules/Utils/CommonData/update.php',{
				method:'post',
				parameters:{
					value: curr_root
				},
				onSuccess: this.on_request.bind(this)
			});
	},
	on_request: function(t) {
		var new_opts = t.responseText.evalJSON();
		var opts = this.obj.options;
		opts.length=0;
		if(new_opts.length==0) {
			this.obj.fire('e_u_cd:clear');
		} else {
			if(this.add_empty==1) opts[0] = new Option('---','');
			$H(new_opts).each(function(x) {opts[opts.length] = new Option(x[1],x[0]);});
			if(this.def_val!='') {
				this.obj.value = this.def_val;
				this.def_val='';
			} else
				this.obj.value = opts[0].value;
//			alert('fire='+this.obj.name+' valyx='+opts[0].value);
//			this.obj.fire('e_u_cd:load');
			setTimeout(this.obj.fire.bind(this.obj,'e_u_cd:load'),1);
		}
	}
};

var Utils_CommonData_freeze = Class.create();
Utils_CommonData_freeze.prototype = {
	obj:null,
	path:null,
	id:null,
	initialize: function(id,cd) {
		this.id = id;
		this.obj = $(id);
		if(this.obj==null) return;
		this.path = cd.evalJSON();
		var obj = this.obj;
		var prev_obj = eval('obj.form.'+this.path[this.path.length-1]);
		if(this.path.length>2)
			Event.observe(prev_obj,'e_u_cd:load',this.request.bindAsEventListener(this));

		this.first_request_bind = this.first_request.bindAsEventListener(this);
		if(this.path.length==2)
			Event.observe(document,'e:load',this.first_request_bind);
	},

	first_request: function(e) {
		Event.stopObserving(document,'e:load',this.first_request_bind);
		//alert('first');
		this.request(null);
	},
	first_request_bind:null,

	request: function(e) {
		var obj = this.obj;
		var curr_root = this.path[0];
		for(var i=1; i<this.path.length; i++) {
			var val = eval('obj.form.'+this.path[i]).value;
			if(val=='') {
				$(this.id+'_label').innerHTML = '---';
				setTimeout(this.obj.fire.bind(this.obj,'e_u_cd:load'),1);
				return;
			}
			curr_root += '/' + val;
		}
		if(this.obj.value=='') {
			$(this.id+'_label').innerHTML = '---';
			setTimeout(this.obj.fire.bind(this.obj,'e_u_cd:load'),1);
			return;
		}
		curr_root += '/' + this.obj.value;
//		alert('request '+obj.name+'; root '+curr_root);
		new Ajax.Request('modules/Utils/CommonData/update_freeze.php',{
				method:'post',
				parameters:{
					value: curr_root
				},
				onSuccess: this.on_request.bind(this)
			});
	},
	on_request: function(t) {
		if (!t.responseText) return;
		var val = t.responseText.evalJSON();
		$(this.id+'_label').innerHTML = val;
		setTimeout(this.obj.fire.bind(this.obj,'e_u_cd:load'),1);
	}
};
